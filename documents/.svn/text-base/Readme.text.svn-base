SpaceWire/RMAP Libraryversion 2008-09-04###################################### 1. Overview#####################################This, SpaceWire/RMAP Library, is a software package of classes which provide convinient and integrated methods to perform data transfer via SpaceWire and Remote Memory Access Protocol. The classes are written in C++ with an emphasis on high portability and modularity so that they can be compiled and executed on several computer systems including UNIX, Macintosh, and SpaceCube architecture. The source code of these classes contains Doxygen style comments, and you can reference API manual, which was automatically generated by the software, from documents/html/index.html.The portable thread classes, called Thread Library, are also provided as a component of this library. It encapsulates multithread environment such as "pthread" of UNIX and "task" of T-Kernel with C++ class so that users can execute the same code on UNIX and T-Kernel. The thread library is widely used in the implimentation of classes which handle SpaceWire and RMAP communication, especially RMAP multiple- and simultaneous-transaction scheme.TCP/IP socket communication is also encapsulated in this library as IPSocket Library. Users can handle socket operations using common classes and methods both on UNIX and T-Kernel environments. The IPSocket Library is used to implement the SpaceWire to TCP/IP bridge software for SpaceCube, which enables users to develop their program involves SpaceWire only on UNIX computers by bridging packets between SpaceWire and TCP/IP networks.###################################### 2. Documentation#####################################Detailed description on this library, which includes explanation of the concept of the framework or class structure of this library, usage of classes, and examples, is prepared in Japanese. The document is available via the wiki site of the Japan SpaceWire User Group hosted on a JAXA/ISAS server.The on-line API reference is included in the distributed package, and it is available from html/index.html which is placed in the same directory as this Readme.text is located.###################################### 3. Requirement#####################################Below, we list the required environment to compile and run the library and softwares created using it. The usual UNIX probably meets the requirement with no additional softwares. SpaceCube1 by Shimafuji Electronics is also main target of this library in T-Kernel.#UNIX (including MacOSX) - C++ compiler such as gcc - make such as gnu make - STL (Standard Template Library) - pthread library for multithreading#T-Kernel (SpaceCube architechture) - C++ compiler for the CPU used in the system   (such as mips-gcc, sh4-gcc) - make - STL (Standard Template Library)  ###################################### 4. How to use this library : install and compile#####################################a. Eclipse CDT is needed to edit and build this package.   If it has not been installed yet, visit the official   web (http://www.eclipse.org/cdt/) and get it installed.b. Place "SpaceWireRMAPLibrary" folder extracted from    the archive of this package at your development directory    such as /usr/local/te in T-Kernel case, and ~/workspace    in UNIX with Eclipse.e. SpaceWireRMAPLibrary folder is an Eclipse Project.   Import the folder to Eclipse, by selecting "General"   => "Existing Projects into Workspace", then choosing   "userprogram_template" folder as a project root folder.d. Set an environmental variable SPACEWIRERMAPLIBRARY_PATH    in Makefile, which is placed in SpaceWireRMAPLibrary/build    folder, to the appropriate absolute path to the library folder.      e.g. If a user ("guestuser") places SpaceWireRMAPLibrary         folder in ~/workspace, the variable should be "/Users/        guestuser/workspace/SpaceWireRMAPLibrary".c. Check whether T-Kernel development tools are installed    at /usr/local/te. If not, please change an environmental    variable "BD" defined in Makefile at build/t-kernel/Makefile    to meet your configuration.      In case that you want to develop only on UNIX/POSIX   environment, or, you do not have T-Kernel development   environment, build processes for T-Kernel can be skipped   by modifying a dependency description in build/Makefile   as below;      [Previous]   all : posix t-kernel      [New]   all : posix d. SpaceWire IP Core and driver software for SpaceCube1    developed by Shimafuji Electric is the standard SpaceWire    IP Core supported by this library (at the point of Sept.    2008). If you want to use NEC Soft's SpaceWire IP Core on    Shimafuji SpaceCube1, please copy NEC Soft's SpaceWire    library (libspw.a) as drivers/spc1_necsoft/libspw.a_original,    and an environmental variable USE_SPC1_NEC_IP_CORE to    YES in SpaceWireRMAPLibrary/build/t-kernel/Makefile to    include the related classes in the build sequence.   "libspw.a" can be obtained by contacting staffs of    JAXA/ISAS.h. Build the library and sample programs. In Eclipse environment,   please click "Build" button or type "Command-B" or "Control-B"   to execute build procedures. Executables for POSIX and T-Kernel   environments are produced, and placed in executables/posix and   executables/t-kernel folders respectively.   f. Run binaries. Examples are indicated using names    start with main_example. Programs named like main_test_xxx    is test cases for individual classes. They are not suited    for ordinary usage, while can provide some references for    developpers.###################################### 5. Examples and Bonus softwares (omake in Japanese)#####################################a. There are several example sources in source_Examples/.- main_example00.cc  It shows the common usage of this library involving classes   such as SpaceWireIF, RMAPEngine, RMAPSocket.- main_example01.cc  Example of multithread programming with Thread Library.- main_example02.cc  Example of RMAP multiple- and simultaneous-transactions.- main_example03.cc  Example of RMAP access only with SpaceWireIF class (without   RMAPEngine, and RMAPSocket)- main_example04.cc  Example of RMAPDestination class which designates a   destination node in a SpaceWire network.b. There are several small softwares which provide    convinient functions especially for SpaceWire/RMAP    development on SpaceCube architecture.- rmaphongo (main_rmaphongo.cc)  It provides command-line-based RMAP functions. Main features  of this program are read/write SpaceWire IF boards,   send/receive raw SpaceWire packets, with configurable   RMAP destinations. This will exert great performance during   development of data acquisition systems such as a digital   logic and a network with SpaceWire routers.- speedtest (main_speedtest.cc)  This measures the transfer speed of implemented SpaceWire   Interface, by transferring data repeatedly.- rmaptargetsimulator (main_rmaptargetsimulator.cc)  This program simulates an RMAP target node which has a virtual   RAM connected to its local address space (0x0000-0000 ~ 0x000F-  FFFF). By running this program on a SpaceCube, users can access   to the virtual RAM from another SpaceCube (with, for example,   rmaphongo) via SpaceWire/RMAP. This can be a reference in case   of the development of RMAP target device simulator softwares.###################################### 6. Make your own program with this library#####################################A folder userfpga_template contains a sample directory structurefor a user program which involves SpaceWire/RMAP transmission.See userprograms/documents/Readme.text for detailedusage of the template.###################################### 7. Directory structure#####################################SpaceWireRMAPLibrary/ - build/   in which compile and link take place - documents/   contains document and API reference    - driver/   contains source code and libraries needed   for SpaceWireIF classes    - executables/   in which compiled binaries are placed    - source_Executables/   contains source code files with main()   functions    - source_SpaceWireRMAPLibrary/   contains source code files of SpaceWire/RMAP Library    - source_ThreadLibrary/   contains source code files of Thread Library - source_IPSocketLibrary/   contains source code files of IPSocket Library- userprograms/   contains a sample directory structure and sample   sources for user program development###################################### 8. Acknowlegement#####################################SpaceWire/RMAP Library was developed after many cut-and-try work accomplished in JAXA/ISAS, The University of Tokyo, Tokyo Institute of Technology, and Hiroshima University. It inherits the acheivements such as SpaceWireRMAPHongo, SpaceWireRMAPHongo2, RMAPLibrary for SpaceCube2/mini, and programs developed for individual experiments in those institutes.SpaceWireCLI class is totally based on spCLI.cc which was developed by Hirokazu Odaka (JAXA/ISAS, UT).###################################### 9. Hisory#####################################2008-05-11first release (Takayuki Yuasa)2008-05-19additions for Router functionalities, supplement to rmaphongo (Takayuki Yuasa)2008-08-22added an explanation of main_rmaptargetsimulator.cc (Takayuki Yuasa)2008-09-02modified install section (Takayuki Yuasa)2008-09-04added userprogram_template description (Takayuki Yuasa)2010-06-14update of SSDTP module used for SpaceWire over TCP/IP.SpaceWire-to-GigabitEther support by SSDTP2.rearrange of Makefiles (Takayuki Yuasa)2010-07-18SSDTP size zero bug was fixed.###################################### 10. Contact#####################################Please contact to the developpers if you have any question or problem with this library. The author list is below. If you have modified the bug or added new functionalities, please feed it back to the library package and fill your name on the author list.Takayuki YuasaMakishima Lab., The University of Tokyoyuasa at_mark amalthea.phys.s.u-tokyo.ac.jp